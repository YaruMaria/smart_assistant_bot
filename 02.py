import asyncio
import logging
import sqlite3
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove

from config import BOT_TOKEN

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)

dp = Dispatcher()

conn = sqlite3.connect('users.db')
cursor = conn.cursor()

cursor.execute('''
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    username TEXT,
    first_name TEXT,
    last_name TEXT
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS daily_tasks (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    task TEXT,
    UNIQUE(user_id, task)
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS daily_tasks_status (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    task_id INTEGER,
    date TEXT,
    done INTEGER DEFAULT 0,
    UNIQUE(user_id, task_id, date)
)
''')

conn.commit()

reply_keyboard = [
    [KeyboardButton(text="–ü–æ–µ–∑–¥–∫–∏")],
    [KeyboardButton(text="–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")],
    [KeyboardButton(text="–ó–∞–º–µ—Ç–∫–∏")]
]
kb = ReplyKeyboardMarkup(keyboard=reply_keyboard, resize_keyboard=True, one_time_keyboard=False)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∑–∞–¥–∞—á–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_states = {}


def get_user_tasks(user_id):
    cursor.execute('SELECT id, task FROM daily_tasks WHERE user_id = ?', (user_id,))
    return cursor.fetchall()


def get_today_date():
    return datetime.now().strftime('%Y-%m-%d')


def get_task_status(user_id, task_id, date):
    cursor.execute('SELECT done FROM daily_tasks_status WHERE user_id = ? AND task_id = ? AND date = ?',
                   (user_id, task_id, date))
    row = cursor.fetchone()
    if row:
        return row[0]
    return 0


def set_task_status(user_id, task_id, date, done):
    try:
        cursor.execute('INSERT INTO daily_tasks_status (user_id, task_id, date, done) VALUES (?, ?, ?, ?)',
                       (user_id, task_id, date, done))
    except sqlite3.IntegrityError:
        cursor.execute('UPDATE daily_tasks_status SET done = ? WHERE user_id = ? AND task_id = ? AND date = ?',
                       (done, user_id, task_id, date))
    conn.commit()


async def send_tasks_with_status(message: types.Message):
    user_id = message.from_user.id
    tasks = get_user_tasks(user_id)
    if not tasks:
        await message.reply("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –¥–µ–ª. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∑–∞–¥–∞—á—É, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –µ—ë.", reply_markup=kb)
        user_states[user_id] = 'awaiting_task'
        return

    date = get_today_date()
    text = "–í–∞—à–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –¥–µ–ª–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n"
    for i, (task_id, task_text) in enumerate(tasks, 1):
        done = get_task_status(user_id, task_id, date)
        status = "‚úÖ" if done else "‚ùå"
        text += f"{i}. {task_text} {status}\n"
    text += "\n–ß—Ç–æ–±—ã –æ—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—ë –Ω–æ–º–µ—Ä.\n–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏."
    await message.reply(text, reply_markup=kb)
    user_states[user_id] = 'awaiting_action'


@dp.message(Command('start'))
async def start(message: types.Message):
    user_id = message.from_user.id

    cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
    user = cursor.fetchone()

    if user is None:
        cursor.execute(
            'INSERT INTO users (user_id, username, first_name, last_name) VALUES (?, ?, ?, ?)',
            (
                user_id,
                message.from_user.username,
                message.from_user.first_name,
                message.from_user.last_name
            )
        )
        conn.commit()
        await message.reply("–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", reply_markup=kb)
    else:
        await message.reply("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.", reply_markup=kb)


@dp.message(Command('help'))
async def help_command(message: types.Message):
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=kb)


@dp.message()
async def handle_buttons(message: types.Message):
    user_id = message.from_user.id
    text = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    state = user_states.get(user_id)

    if state == 'awaiting_task':
        # –î–æ–±–∞–≤–ª—è—é –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
        if text in ["–ü–æ–µ–∑–¥–∫–∏", "–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", "–ó–∞–º–µ—Ç–∫–∏"]:
            await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∑–∞–¥–∞—á—É –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.", reply_markup=kb)
            return
        try:
            cursor.execute('INSERT INTO daily_tasks (user_id, task) VALUES (?, ?)', (user_id, text))
            conn.commit()
            await message.reply(f"–ó–∞–¥–∞—á–∞ '{text}' –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=kb)
            user_states.pop(user_id)
        except sqlite3.IntegrityError:
            await message.reply("–¢–∞–∫–∞—è –∑–∞–¥–∞—á–∞ —É–∂–µ –µ—Å—Ç—å.", reply_markup=kb)
        return

    if text == "–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ":
        await send_tasks_with_status(message)
        return

    if state == 'awaiting_action':
        tasks = get_user_tasks(user_id)
        if text.isdigit():
            num = int(text)
            if 1 <= num <= len(tasks):
                task_id = tasks[num-1][0]
                date = get_today_date()
                done = get_task_status(user_id, task_id, date)
                if done:
                    await message.reply("–≠—Ç–∞ –∑–∞–¥–∞—á–∞ —É–∂–µ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è.", reply_markup=kb)
                else:
                    set_task_status(user_id, task_id, date, 1)
                    await message.reply(f"–ó–∞–¥–∞—á–∞ '{tasks[num-1][1]}' –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è!", reply_markup=kb)
                return
            else:
                await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏.", reply_markup=kb)
                return
        else:
            # –î–æ–±–∞–≤–ª—è—é –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
            try:
                cursor.execute('INSERT INTO daily_tasks (user_id, task) VALUES (?, ?)', (user_id, text))
                conn.commit()
                await message.reply(f"–ó–∞–¥–∞—á–∞ '{text}' –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=kb)
            except sqlite3.IntegrityError:
                await message.reply("–¢–∞–∫–∞—è –∑–∞–¥–∞—á–∞ —É–∂–µ –µ—Å—Ç—å.", reply_markup=kb)
            return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –∫–Ω–æ–ø–æ–∫
    if text == "–ü–æ–µ–∑–¥–∫–∏":
        await message.reply("–ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–µ–∑–¥–∫–∞—Ö.", reply_markup=kb)
    elif text == "–ó–∞–º–µ—Ç–∫–∏":
        await message.reply("–ó–¥–µ—Å—å –±—É–¥—É—Ç –≤–∞—à–∏ –∑–∞–º–µ—Ç–∫–∏.", reply_markup=kb)
    else:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ–ø—Ü–∏–π.", reply_markup=kb)

async def reminder_task(bot: Bot):
    while True:
        now = datetime.now()
        date = now.strftime('%Y-%m-%d')

        cursor.execute('SELECT user_id FROM users')
        users = cursor.fetchall()

        for (user_id,) in users:
            tasks = get_user_tasks(user_id)
            if not tasks:
                continue

            # –ü—Ä–æ–≤–µ—Ä—è—é, –≤—Å–µ –ª–∏ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
            all_done = True
            unfinished_tasks = []
            for task_id, task_text in tasks:
                done = get_task_status(user_id, task_id, date)
                if not done:
                    all_done = False
                    unfinished_tasks.append(task_text)

            try:
                if all_done and tasks:
                    await bot.send_message(user_id, "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—Å–µ –≤–∞—à–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –¥–µ–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã! üéâ")
                elif unfinished_tasks:
                    text = "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —É –≤–∞—Å –µ—Å—Ç—å –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –¥–µ–ª–∞:\n"
                    for t in unfinished_tasks:
                        text += f"‚Ä¢ {t}\n"
                    await bot.send_message(user_id, text)
            except Exception as e:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

        # –°–±—Ä–∞—Å—ã–≤–∞—é —Å—Ç–∞—Ç—É—Å—ã –≤ –ø–æ–ª–Ω–æ—á—å
        if now.time() >= time(0, 0) and now.time() < time(0, 10):
            # –£–¥–∞–ª—è—é —Å—Ç–∞—Ç—É—Å—ã –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –¥–µ–Ω—å, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ
            cursor.execute('DELETE FROM daily_tasks_status WHERE date != ?', (date,))
            conn.commit()

        #  2 —á–∞—Å–∞
        await asyncio.sleep(2 * 60 * 60)

if __name__ == '__main__':
    import asyncio
    from aiogram import Bot

    bot = Bot(token=BOT_TOKEN)
    dp.run_polling(bot)

