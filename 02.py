import asyncio
import logging
import sqlite3
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from stic import cmd_start as stic_start, photo_handler as stic_photo_handler, caption_handler as stic_caption_handler, \
    user_data
from stic import user_data as stic_user_data

from config import BOT_TOKEN

# –¥–µ–ª–∞—é –∑–∞—â–∏—Ç—É –ø—Ä–æ—Ç–∏–≤ —Ä–µ–∫–ª–∞–º—ã –∏ —Ç.–¥
import requests

TOKEN = '7585920451:AAFr1eFDKgH37GoqztPry9uw0XHWUTcVCrM'
url = f'https://api.telegram.org/bot{TOKEN}/deleteWebhook'
response = requests.get(url)
print(response.json())

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)

dp = Dispatcher()

conn = sqlite3.connect('user.db')
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
cursor.execute('''
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    username TEXT,
    first_name TEXT,
    last_name TEXT
);
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS daily_tasks (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    task TEXT,
    date TEXT,
    priority INTEGER DEFAULT 3,  -- 1: –≤—ã—Å–æ–∫–∞—è, 2: —Å—Ä–µ–¥–Ω—è—è, 3: –Ω–∏–∑–∫–∞—è
    UNIQUE(user_id, task)
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS daily_tasks_status (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    task_id INTEGER,
    date TEXT,
    done INTEGER DEFAULT 0,
    UNIQUE(user_id, task_id, date)
);
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS trips (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    destination TEXT,
    date TEXT,
    time TEXT,
    address TEXT,
    created_at TEXT
);
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS user_achievements (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    badge_name TEXT,
    badge_description TEXT,
    achieved_at TEXT,
    UNIQUE(user_id, badge_name)
);
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS user_stats (
    user_id INTEGER PRIMARY KEY,
    tasks_completed INTEGER DEFAULT 0,
    high_priority_completed INTEGER DEFAULT 0,
    streaks INTEGER DEFAULT 0,
    last_completion_date TEXT
);
''')

conn.commit()

# –û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ü–æ–µ–∑–¥–∫–∏")],
        [KeyboardButton(text="–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")],
        [KeyboardButton(text="–ú–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è"), KeyboardButton(text="–ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å")],
        [KeyboardButton(text="—Å–æ–∑–¥–∞—Ç—å —Å—Ç–∏–∫–µ—Ä")]
    ],
    resize_keyboard=True,
    one_time_keyboard=False
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
planning_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")],
        [KeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –¥–µ–ª")]
    ],
    resize_keyboard=True,
    one_time_keyboard=True
)

trips_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ –ø–æ–µ–∑–¥–∫–∏")],
        [KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –ø–æ–µ–∑–¥–∫—É")],
        [KeyboardButton(text="–ù–∞–∑–∞–¥")]
    ],
    resize_keyboard=True,
    one_time_keyboard=True
)

back_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ù–∞–∑–∞–¥")]
    ],
    resize_keyboard=True,
    one_time_keyboard=True
)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∑–∞–¥–∞—á–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_states = {}
trip_states = {}


def get_task_status(user_id: int, task_id: int, date: str) -> bool:
    # –ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
    try:
        cursor.execute('''
            SELECT done FROM daily_tasks_status 
            WHERE user_id = ? AND task_id = ? AND date = ?
        ''', (user_id, task_id, date))
        result = cursor.fetchone()
        return bool(result[0]) if result else False
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏: {e}")
        return False


@dp.message(F.text == "–ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å")
async def show_progress_handler(message: types.Message):
    await show_progress(message)

    check_achievements


@dp.message(F.text == "–ú–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è")
async def show_achievements_handler(message: types.Message):
    await show_achievements(message)


def update_user_stats(user_id: int, priority: int = None):
    # –û–±–Ω–æ–≤–ª—è—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
    today = get_today_date()
    cursor.execute('SELECT last_completion_date FROM user_stats WHERE user_id = ?', (user_id,))
    result = cursor.fetchone()

    if result is None:
        # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        cursor.execute('''
            INSERT INTO user_stats (user_id, tasks_completed, high_priority_completed, streaks, last_completion_date)
            VALUES (?, 1, ?, 1, ?)
        ''', (user_id, 1 if priority == 1 else 0, today))
    else:
        last_date = result[0]
        streaks = 1 if last_date != today else 0

        # –û–±–Ω–æ–≤–ª—è—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        if priority == 1:
            cursor.execute('''
                UPDATE user_stats 
                SET tasks_completed = tasks_completed + 1,
                    high_priority_completed = high_priority_completed + 1,
                    streaks = streaks + ?,
                    last_completion_date = ?
                WHERE user_id = ?
            ''', (streaks, today, user_id))
        else:
            cursor.execute('''
                UPDATE user_stats 
                SET tasks_completed = tasks_completed + 1,
                    streaks = streaks + ?,
                    last_completion_date = ?
                WHERE user_id = ?
            ''', (streaks, today, user_id))

    conn.commit()


def get_user_tasks(user_id: int) -> list:
    # –ü–æ–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
    today_date = get_today_date()
    try:
        cursor.execute('''
            SELECT t.id, t.task, t.priority
            FROM daily_tasks t
            WHERE t.user_id = ? AND t.date = ?
            ORDER BY t.priority ASC
        ''', (user_id, today_date))
        return cursor.fetchall()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return []


def check_achievements(user_id: int):
    # –ü—Ä–æ–≤–µ—Ä—è—é, –∫–∞–∫–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞—Ä–∞–±–æ—Ç–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    cursor.execute('''
        SELECT tasks_completed, high_priority_completed, streaks 
        FROM user_stats 
        WHERE user_id = ?
    ''', (user_id,))

    stats = cursor.fetchone()

    if not stats:
        return []

    tasks_completed, high_priority_completed, streaks = stats
    new_achievements = []

    #  —É—Å–ª–æ–≤–∏—è –¥–ª—è –Ω–∞–≥—Ä–∞–¥
    achievements = [
        ("–ù–æ–≤–∏—á–æ–∫", "–í—ã–ø–æ–ª–Ω–∏–ª –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É!", lambda: tasks_completed >= 1),
        ("–¢—Ä—É–¥—è–≥–∞", "–í—ã–ø–æ–ª–Ω–∏–ª 10 –∑–∞–¥–∞—á!", lambda: tasks_completed >= 10),
        ("–ú–∞—Å—Ç–µ—Ä –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", "–í—ã–ø–æ–ª–Ω–∏–ª 50 –∑–∞–¥–∞—á!", lambda: tasks_completed >= 50),
        ("–õ–µ–≥–µ–Ω–¥–∞", "–í—ã–ø–æ–ª–Ω–∏–ª 100 –∑–∞–¥–∞—á!", lambda: tasks_completed >= 100),
        ("–°—Ä–æ—á–Ω–∏–∫", "–í—ã–ø–æ–ª–Ω–∏–ª 5 –∑–∞–¥–∞—á —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º", lambda: high_priority_completed >= 5),
        ("–ì–µ—Ä–æ–π —Å—Ä–æ—á–Ω—ã—Ö –¥–µ–ª", "–í—ã–ø–æ–ª–Ω–∏–ª 20 –∑–∞–¥–∞—á —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º", lambda: high_priority_completed >= 20),
        ("–°–µ—Ä–∏–π–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å", "–í—ã–ø–æ–ª–Ω—è–ª –∑–∞–¥–∞—á–∏ 3 –¥–Ω—è –ø–æ–¥—Ä—è–¥", lambda: streaks >= 3),
        ("–ù–µ–¥–µ–ª—å–Ω—ã–π —á–µ–º–ø–∏–æ–Ω", "–í—ã–ø–æ–ª–Ω—è–ª –∑–∞–¥–∞—á–∏ 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥", lambda: streaks >= 7),
        ("–ú–µ—Å—è—Ü –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã", "–í—ã–ø–æ–ª–Ω—è–ª –∑–∞–¥–∞—á–∏ 30 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥", lambda: streaks >= 30),
        ("–ü–µ—Ä—Ñ–µ–∫—Ü–∏–æ–Ω–∏—Å—Ç", "–í—ã–ø–æ–ª–Ω–∏–ª 10 –∑–∞–¥–∞—á –ø–æ–¥—Ä—è–¥ –±–µ–∑ –ø—Ä–æ–ø—É—Å–∫–æ–≤", lambda: streaks >= 10)
    ]

    for name, desc, condition in achievements:
        # –ü—Ä–æ–≤–µ—Ä—è—é, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –Ω–∞–≥—Ä–∞–¥–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute('SELECT 1 FROM user_achievements WHERE user_id = ? AND badge_name = ?', (user_id, name))
        if not cursor.fetchone() and condition():
            # –î–æ–±–∞–≤–ª—è—é –Ω–æ–≤—É—é –Ω–∞–≥—Ä–∞–¥—É
            cursor.execute('''
                INSERT INTO user_achievements (user_id, badge_name, badge_description, achieved_at)
                VALUES (?, ?, ?, ?)
            ''', (user_id, name, desc, get_today_date()))
            new_achievements.append((name, desc))

    conn.commit()
    return new_achievements


async def show_achievements(message: types.Message):
    # –ü–æ–∫–∞–∑—ã–≤–∞—é –≤—Å–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –Ω–∞–≥—Ä–∞–¥—ã
    user_id = message.from_user.id
    cursor.execute('''
        SELECT badge_name, badge_description, achieved_at 
        FROM user_achievements 
        WHERE user_id = ?
        ORDER BY achieved_at DESC
    ''', (user_id,))

    achievements = cursor.fetchall()

    if not achievements:
        await message.reply("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞–≥—Ä–∞–¥. –í—ã–ø–æ–ª–Ω—è–π—Ç–µ –∑–∞–¥–∞—á–∏, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –∏—Ö!", reply_markup=main_keyboard)
        return

    text = "üèÜ –í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:\n\n"
    for i, (name, desc, date) in enumerate(achievements, 1):
        text += f"{i}. {name} - {desc}\n   üóì {date}\n\n"

    await message.reply(text, reply_markup=main_keyboard)


async def send_tasks_with_status(message: types.Message):
    user_id = message.from_user.id
    tasks = get_user_tasks(user_id)
    today_date = get_today_date()

    if not tasks:
        await message.reply(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –¥–µ–ª –Ω–∞ —Å–µ–≥–æ–¥–Ω—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –∑–∞–¥–∞—á—É, –æ—Ç–ø—Ä–∞–≤–∏–≤ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏.",
            reply_markup=main_keyboard
        )
        return

    text = "üìù –í–∞—à–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –¥–µ–ª–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n"
    for i, (task_id, task_text, priority) in enumerate(tasks, 1):
        done = get_task_status(user_id, task_id, today_date)
        status = "‚úÖ" if done else "‚ùå"
        priority_icon = "üî¥" if priority == 1 else "üü°" if priority == 2 else "üü¢"
        text += f"{i}. {priority_icon} {task_text} {status}\n"

    text += "\n–ß—Ç–æ–±—ã –æ—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—ë –Ω–æ–º–µ—Ä."
    await message.reply(text, reply_markup=main_keyboard)
    user_states[user_id] = 'awaiting_action'


async def ask_task_priority(message: types.Message, task_text: str):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üî¥ –í—ã—Å–æ–∫–∞—è", callback_data=f"set_priority:{task_text}:1"),
            InlineKeyboardButton(text="üü° –°—Ä–µ–¥–Ω—è—è", callback_data=f"set_priority:{task_text}:2"),
            InlineKeyboardButton(text="üü¢ –ù–∏–∑–∫–∞—è", callback_data=f"set_priority:{task_text}:3")
        ]
    ])

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–¥–∞—á–∏:",
        reply_markup=keyboard
    )


@dp.callback_query(F.data.startswith("set_priority:"))
async def set_task_priority(callback: types.CallbackQuery):
    _, task_text, priority = callback.data.split(":")
    user_id = callback.from_user.id
    today_date = get_today_date()

    try:
        cursor.execute(
            'INSERT INTO daily_tasks (user_id, task, date, priority) VALUES (?, ?, ?, ?)',
            (user_id, task_text, today_date, int(priority)))
        conn.commit()
        await callback.message.edit_text(f"–ó–∞–¥–∞—á–∞ '{task_text}' –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º {priority}!")
    except sqlite3.IntegrityError:
        await callback.message.edit_text("–¢–∞–∫–∞—è –∑–∞–¥–∞—á–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}")
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏.")


#  –ö–ê–õ–ï–ù–î–ê–†–¨
async def show_calendar(message: types.Message, year: int = None, month: int = None):
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å
    now = datetime.now()
    if year is None:
        year = now.year
    if month is None:
        month = now.month

    kb_builder = InlineKeyboardBuilder()

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –º–µ—Å—è—Ü–µ–º –∏ –≥–æ–¥–æ–º
    month_name = ["–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å",
                  "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"][month - 1]
    kb_builder.row(InlineKeyboardButton(
        text=f"{month_name} {year}",
        callback_data="ignore"
    ))

    # –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
    week_days = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
    kb_builder.row(*[InlineKeyboardButton(text=day, callback_data="ignore") for day in week_days])

    # –ü–æ–ª—É—á–∞—é –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
    first_day = datetime(year, month, 1)
    days_in_month = (datetime(year, month + 1, 1) - timedelta(days=1)).day if month < 12 else 31

    # –ó–∞–ø–æ–ª–Ω—è—é –∫–∞–ª–µ–Ω–¥–∞—Ä—å
    weeks = []
    current_week = []

    # –ü—É—Å—Ç—ã–µ –∫–ª–µ—Ç–∫–∏ –¥–æ –ø–µ—Ä–≤–æ–≥–æ –¥–Ω—è
    for _ in range(first_day.weekday()):
        current_week.append(InlineKeyboardButton(text=" ", callback_data="ignore"))

    # –î–Ω–∏ –º–µ—Å—è—Ü–∞
    for day in range(1, days_in_month + 1):
        date = datetime(year, month, day)
        if date.date() < now.date():  # –ü—Ä–æ—à–µ–¥—à–∏–µ –¥–Ω–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã
            current_week.append(InlineKeyboardButton(text=" ", callback_data="ignore"))
        else:
            current_week.append(InlineKeyboardButton(
                text=str(day),
                callback_data=f"trip_date:{year}-{month:02d}-{day:02d}"
            ))

        if len(current_week) == 7:
            weeks.append(current_week)
            current_week = []

    # –î–æ–±–∞–≤–ª—è—é –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é
    if current_week:
        weeks.append(current_week)

    # –î–æ–±–∞–≤–ª—è—é –Ω–µ–¥–µ–ª–∏ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    for week in weeks:
        kb_builder.row(*week)

    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    prev_year, next_year = year, year
    prev_month = month - 1
    next_month = month + 1

    if prev_month < 1:
        prev_month = 12
        prev_year -= 1
    if next_month > 12:
        next_month = 1
        next_year += 1

    kb_builder.row(
        InlineKeyboardButton(
            text="‚Üê",
            callback_data=f"calendar:{prev_year}-{prev_month}"
        ),
        InlineKeyboardButton(
            text="‚Üí",
            callback_data=f"calendar:{next_year}-{next_month}"
        )
    )

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –ø–æ–µ–∑–¥–∫–∏:",
        reply_markup=kb_builder.as_markup()
    )


@dp.callback_query(F.data.startswith("calendar:"))
async def process_calendar_navigation(callback: types.CallbackQuery):
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ—Å—è—Ü–µ–≤ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ
    _, year_month = callback.data.split(":")
    year, month = map(int, year_month.split("-"))
    await callback.message.delete()
    await show_calendar(callback.message, year, month)


@dp.callback_query(F.data.startswith("trip_date:"))
async def process_date_selection(callback: types.CallbackQuery):
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    _, date_str = callback.data.split(":")
    user_id = callback.from_user.id

    # –°–æ—Ö—Ä–∞–Ω—è—é –¥–∞—Ç—É –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    trip_states[user_id] = {
        'step': 'awaiting_time',
        'data': {
            'date': date_str
        }
    }

    await callback.message.delete()
    await callback.message.answer(
        f"üìÖ –í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: {date_str}\n"
        f"‚è∞ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –ø–æ–µ–∑–¥–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30):",
        reply_markup=back_keyboard
    )


@dp.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å –ø–æ–µ–∑–¥–∫—É")
async def add_trip(message: types.Message):
    # –ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–µ–∑–¥–∫–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
    await show_calendar(message)


#   –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò
@dp.message(F.text == "—Å–æ–∑–¥–∞—Ç—å —Å—Ç–∏–∫–µ—Ä")
async def handle_create_sticker(message: types.Message):
    stic_user_data[message.from_user.id] = {}
    await stic_start(message)


@dp.message(F.photo)
async def handle_photo(message: types.Message):
    if message.from_user.id in stic_user_data:
        stic_user_data[message.from_user.id] = {
            'image_file_id': message.photo[-1].file_id,
            'chat_id': message.chat.id
        }
        await stic_photo_handler(message)


@dp.message(lambda message: message.from_user.id in stic_user_data)
async def handle_text_for_sticker(message: types.Message):
    await stic_caption_handler(message)


def get_user_tasks(user_id):
    cursor.execute('SELECT id, task FROM daily_tasks WHERE user_id = ? AND date = ?', (user_id, get_today_date()))
    return cursor.fetchall()


def get_today_date():
    return datetime.now().strftime('%Y-%m-%d')


def get_task_status(user_id, task_id, date):
    cursor.execute('SELECT done FROM daily_tasks_status WHERE user_id = ? AND task_id = ? AND date = ?',
                   (user_id, task_id, date))
    row = cursor.fetchone()
    return row[0] if row else 0


async def show_progress(message: types.Message):
    # –ü–æ–∫–∞–∑—ã–≤–∞—é –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = message.from_user.id
    cursor.execute('''
        SELECT tasks_completed, high_priority_completed, streaks 
        FROM user_stats 
        WHERE user_id = ?
    ''', (user_id,))

    stats = cursor.fetchone()

    if not stats:
        await message.reply("–í—ã –µ—â–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏. –ù–∞—á–Ω–∏—Ç–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å!", reply_markup=main_keyboard)
        return

    tasks_completed, high_priority_completed, streaks = stats

    text = (
        "üìä –í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å:\n\n"
        f"‚úÖ –í—Å–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á: {tasks_completed}\n"
        f"üî¥ –ó–∞–¥–∞—á —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º: {high_priority_completed}\n"
        f"üî• –¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è: {streaks} –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥\n\n"
        "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!"
    )

    await message.reply(text, reply_markup=main_keyboard)


def set_task_status(user_id, task_id, date, done):
    try:
        cursor.execute('''
            INSERT OR REPLACE INTO daily_tasks_status 
            (user_id, task_id, date, done) 
            VALUES (?, ?, ?, ?)
        ''', (user_id, task_id, date, done))

        # –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if done:
            priority = get_task_priority(task_id)
            update_user_stats(user_id, priority)
            new_badges = check_achievements(user_id)
            return True, new_badges
        return True, []
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏: {e}")
        return False, []


async def send_tasks_with_status(message: types.Message):
    user_id = message.from_user.id
    today_date = get_today_date()

    cursor.execute('''
        SELECT t.id, t.task, t.priority, s.done 
        FROM daily_tasks t
        LEFT JOIN daily_tasks_status s ON t.id = s.task_id AND s.user_id = t.user_id AND s.date = ?
        WHERE t.user_id = ? AND t.date = ?
    ''', (today_date, user_id, today_date))

    tasks = cursor.fetchall()

    if not tasks:
        await message.reply(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –¥–µ–ª –Ω–∞ —Å–µ–≥–æ–¥–Ω—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –∑–∞–¥–∞—á—É, –æ—Ç–ø—Ä–∞–≤–∏–≤ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏.",
            reply_markup=main_keyboard
        )
        return

    text = "–í–∞—à–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –¥–µ–ª–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n"
    for i, (task_id, task_text, priority, done) in enumerate(tasks, 1):
        status = "‚úÖ" if done else "‚ùå"
        priority_icon = "üî¥" if priority == 1 else "üü°" if priority == 2 else "üü¢"
        text += f"{i}. {priority_icon} {task_text} {status}\n"
    text += "\n–ß—Ç–æ–±—ã –æ—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—ë –Ω–æ–º–µ—Ä."

    await message.reply(text, reply_markup=main_keyboard)
    user_states[user_id] = 'awaiting_action'


@dp.message(Command('start'))
async def start(message: types.Message):
    user_id = message.from_user.id
    cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
    user = cursor.fetchone()

    if user is None:
        cursor.execute(
            'INSERT INTO users (user_id, username, first_name, last_name) VALUES (?, ?, ?, ?)',
            (user_id, message.from_user.username, message.from_user.first_name, message.from_user.last_name)
        )
        conn.commit()
        await message.reply("–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", reply_markup=main_keyboard)
    else:
        await message.reply("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.", reply_markup=main_keyboard)


@dp.message(Command('help'))
async def help_command(message: types.Message):
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=main_keyboard)


async def show_upcoming_trips(message: types.Message):
    user_id = message.from_user.id
    today = datetime.now().strftime('%Y-%m-%d')

    cursor.execute('''
        SELECT destination, date, time, address 
        FROM trips 
        WHERE user_id = ? AND date >= ?
        ORDER BY date, time
    ''', (user_id, today))

    trips = cursor.fetchall()

    if not trips:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–µ–∑–¥–æ–∫.", reply_markup=trips_keyboard)
        return

    response = "–í–∞—à–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–µ–∑–¥–∫–∏:\n\n"
    for i, (destination, date, time, address) in enumerate(trips, 1):
        map_url = f"https://yandex.ru/maps/?text={address.replace(' ', '+')}"
        response += (
            f"{i}. üöó {destination}\n"
            f"   üìÖ {date} ‚è∞ {time}\n"
            f"   üìç {address}\n"
            f"   üó∫ [–û—Ç–∫—Ä—ã—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ]({map_url})\n\n"
        )

    await message.reply(response, reply_markup=trips_keyboard, disable_web_page_preview=True)


@dp.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å –ø–æ–µ–∑–¥–∫—É")
async def add_trip(message: types.Message):
    # –ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–µ–∑–¥–∫–∏ - –ø–æ–∫–∞–∑—ã–≤–∞—é –∫–∞–ª–µ–Ω–¥–∞—Ä—å
    await show_calendar(message.chat.id)


@dp.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")
async def add_task_handler(message: types.Message):
    user_states[message.from_user.id] = 'awaiting_task'
    await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:", reply_markup=main_keyboard)


def get_task_priority(task_id: int) -> int:
    # –í–æ–∑–≤—Ä–∞—â–∞—é –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–¥–∞—á–∏
    cursor.execute('SELECT priority FROM daily_tasks WHERE id = ?', (task_id,))
    result = cursor.fetchone()
    return result[0] if result else 3


@dp.message()
async def handle_buttons(message: types.Message):
    user_id = message.from_user.id
    text = message.text.strip()
    logging.info(f"Received message: {text} from user: {user_id}")

    if text == "–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ":
        user_states[user_id] = None
        await message.reply("–í—ã –≤—ã–±—Ä–∞–ª–∏ '–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ'.", reply_markup=planning_keyboard)
        return

    elif text == "–ü–æ–µ–∑–¥–∫–∏":
        await message.reply("–í—ã –≤—ã–±—Ä–∞–ª–∏ '–ü–æ–µ–∑–¥–∫–∏'. –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=trips_keyboard)
        return

    elif text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ –ø–æ–µ–∑–¥–∫–∏":
        await show_upcoming_trips(message)
        return

    elif text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –¥–µ–ª":
        await send_tasks_with_status(message)
        return

    elif text == "–ù–∞–∑–∞–¥":
        await message.reply("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_keyboard)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    state = user_states.get(user_id)

    if user_states.get(user_id) == 'awaiting_task':
        await ask_task_priority(message, text)
        user_states.pop(user_id)
        return


    elif state == 'awaiting_action':
        try:
            task_index = int(text) - 1
            tasks = get_user_tasks(user_id)
            if 0 <= task_index < len(tasks):
                task_id, task_text = tasks[task_index]
                today_date = get_today_date()
                current_status = get_task_status(user_id, task_id, today_date)
                new_status = 1 if current_status == 0 else 0
                success, new_badges = set_task_status(user_id, task_id, today_date, new_status)
                if success:
                    status_text = "–≤—ã–ø–æ–ª–Ω–µ–Ω–∞ ‚úÖ" if new_status == 1 else "–Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ ‚ùå"
                    reply_text = f"–ó–∞–¥–∞—á–∞ '{task_text}' –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ {status_text}."
                    if new_status == 1 and new_badges:
                        reply_text += "\n\nüéâ –ù–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:\n"
                        for name, desc in new_badges:
                            reply_text += f"üèÖ {name}: {desc}\n"
                    await message.reply(reply_text, reply_markup=main_keyboard)
                else:
                    await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏.", reply_markup=main_keyboard)
                user_states.pop(user_id)
            else:
                await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏.", reply_markup=main_keyboard)
        except ValueError:
            await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏.", reply_markup=main_keyboard)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–µ–∑–¥–∫–∏
    if user_id in trip_states:
        state = trip_states[user_id]
        step = state['step']
        data = state['data']

        if step == 'awaiting_time':
            try:
                datetime.strptime(text, '%H:%M')
                data['time'] = text
                state['step'] = 'awaiting_address'
                await message.reply("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∏–ª–∏ –º–µ—Å—Ç–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:", reply_markup=back_keyboard)
            except ValueError:
                await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ (–ß–ß:–ú–ú).", reply_markup=back_keyboard)
            return

        elif step == 'awaiting_address':
            data['address'] = text
            data['created_at'] = datetime.now().strftime('%Y-%m-%d %H:%M:%S')

            try:
                cursor.execute('''
                    INSERT INTO trips (user_id, destination, date, time, address, created_at)
                    VALUES (?, ?, ?, ?, ?, ?)
                ''', (user_id, text, data['date'], data['time'], data['address'], data['created_at']))
                conn.commit()

                map_url = f"https://yandex.ru/maps/?text={text.replace(' ', '+')}"
                await message.reply(
                    f"üöó –ü–æ–µ–∑–¥–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n"
                    f"üìÖ –î–∞—Ç–∞: {data['date']}\n"
                    f"‚è∞ –í—Ä–µ–º—è: {data['time']}\n"
                    f"üìç –ê–¥—Ä–µ—Å: {data['address']}\n\n"
                    f"üó∫ –û—Ç–∫—Ä—ã—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ: {map_url}",
                    reply_markup=main_keyboard
                )
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–µ–∑–¥–∫–∏: {e}")
                await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–µ–∑–¥–∫–∏.", reply_markup=main_keyboard)
            finally:
                trip_states.pop(user_id)
            return

    await message.reply("–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.", reply_markup=main_keyboard)


async def reminder_loop(bot: Bot):
    user_last_meme = {}
    meme_messages = [
        {"text": "‚è∞ –û—Å—Ç–∞–ª–æ—Å—å —Å–æ–≤—Å–µ–º –º–∞–ª–æ –≤—Ä–µ–º–µ–Ω–∏! –ü–æ—Ç–æ—Ä–æ–ø–∏—Å—å!", "photo": "https://ltdfoto.ru/image/s4WGxu"},
        {"text": "üî• –í—Ä–µ–º—è —Ç–∏–∫–∞–µ—Ç! –ù–µ –æ—Ç–∫–ª–∞–¥—ã–≤–∞–π –Ω–∞ –ø–æ—Ç–æ–º!", "photo": "https://ltdfoto.ru/image/s4WQ6Z"},
        {"text": "üöÄ –¢—ã –º–æ–∂–µ—à—å —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å! –û—Å—Ç–∞–ª–æ—Å—å —Å–æ–≤—Å–µ–º –Ω–µ–º–Ω–æ–≥–æ!",
         "photo": "https://ltdfoto.ru/images/2025/04/20/CAK-NORIS.jpg"},
        {"text": "–ë—É–¥—å –∫–∞–∫ –ß–µ–ª–µ–Ω—Ç–∞–Ω–æ!", "photo": "https://ltdfoto.ru/images/2025/04/20/CELENTANO.jpg"},
        {"text": "–ü–æ–º–Ω–∏ –æ–± —ç—Ç–æ–º!", "photo": "https://ltdfoto.ru/images/2025/04/20/DI-KAPRIO-1.jpg"}
    ]

    # –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
    priority_intervals = {
        1: 60 * 60,
        2: 2 * 60 * 60,
        3: 3 * 60 * 60
    }

    # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏ –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    last_reminder_time = {}

    while True:
        now = datetime.now()
        today = get_today_date()

        # –ü–æ–ª—É—á–∞—é –≤—Å–µ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor.execute('''
            SELECT t.user_id, t.id, t.task, t.priority, s.done 
            FROM daily_tasks t
            LEFT JOIN daily_tasks_status s ON t.id = s.task_id AND s.user_id = t.user_id AND s.date = ?
            WHERE t.date = ? AND (s.done = 0 OR s.done IS NULL)
        ''', (today, today))

        tasks = cursor.fetchall()

        for user_id, task_id, task_text, priority, _ in tasks:
            # –ü—Ä–æ–≤–µ—Ä—è—é, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏
            last_time = last_reminder_time.get((user_id, task_id), datetime.min)
            time_since_last = (now - last_time).total_seconds()

            if time_since_last >= priority_intervals[priority]:
                try:
                    if user_id not in user_last_meme:
                        user_last_meme[user_id] = {'last_type': 'text', 'meme_index': 0}

                    # –û–ø—Ä–µ–¥–µ–ª—è—é —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è (—Ç–µ–∫—Å—Ç –∏–ª–∏ –º–µ–º)
                    if user_last_meme[user_id]['last_type'] == 'text':
                        meme_index = user_last_meme[user_id]['meme_index']
                        meme = meme_messages[meme_index]

                        try:
                            await bot.send_photo(
                                user_id,
                                photo=meme["photo"],
                                caption=f"{meme['text']}\n\n–ó–∞–¥–∞—á–∞: {task_text}\n–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {'üî¥ –í—ã—Å–æ–∫–∏–π' if priority == 1 else 'üü° –°—Ä–µ–¥–Ω–∏–π' if priority == 2 else 'üü¢ –ù–∏–∑–∫–∏–π'}",
                                reply_markup=main_keyboard
                            )
                        except Exception as e:
                            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–º–∞: {e}")
                            await bot.send_message(
                                user_id,
                                f"{meme['text']}\n\n–ó–∞–¥–∞—á–∞: {task_text}\n–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {'üî¥ –í—ã—Å–æ–∫–∏–π' if priority == 1 else 'üü° –°—Ä–µ–¥–Ω–∏–π' if priority == 2 else 'üü¢ –ù–∏–∑–∫–∏–π'}",
                                reply_markup=main_keyboard
                            )

                        user_last_meme[user_id]['meme_index'] = (meme_index + 1) % len(meme_messages)
                        user_last_meme[user_id]['last_type'] = 'photo'
                    else:
                        await bot.send_message(
                            user_id,
                            f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–¥–∞—á–µ:\n{task_text}\n–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {'üî¥ –í—ã—Å–æ–∫–∏–π' if priority == 1 else 'üü° –°—Ä–µ–¥–Ω–∏–π' if priority == 2 else 'üü¢ –ù–∏–∑–∫–∏–π'}",
                            reply_markup=main_keyboard
                        )
                        user_last_meme[user_id]['last_type'] = 'text'

                    # –û–±–Ω–æ–≤–ª—è—é –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                    last_reminder_time[(user_id, task_id)] = now

                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è {user_id}: {e}")
                    user_last_meme[user_id] = {'last_type': 'text', 'meme_index': 0}

        await asyncio.sleep(10)  # –ü—Ä–æ–≤–µ—Ä—è—é –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É


async def trip_reminder_loop(bot: Bot):
    while True:
        await asyncio.sleep(60)

        now = datetime.now()
        current_time = now.strftime('%H:%M')
        current_date = now.strftime('%Y-%m-%d')

        cursor.execute('''
            SELECT user_id, destination, date, time, address 
            FROM trips 
            WHERE date = ?
        ''', (current_date,))

        upcoming_trips = cursor.fetchall()

        for trip in upcoming_trips:
            user_id, destination, date, time, address = trip
            trip_start_time = datetime.strptime(f"{date} {time}", '%Y-%m-%d %H:%M')
            time_diff = (trip_start_time - now).total_seconds() / 60

            if 29.5 < time_diff <= 30:
                await bot.send_message(
                    user_id,
                    f"üöó –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –¥–æ –ø–æ–µ–∑–¥–∫–∏ –≤ {destination} –æ—Å—Ç–∞–ª–æ—Å—å 30 –º–∏–Ω—É—Ç!\n"
                    f"üìÖ –î–∞—Ç–∞: {date}\n‚è∞ –í—Ä–µ–º—è: {time}\nüìç –ê–¥—Ä–µ—Å: {address}",
                    reply_markup=main_keyboard
                )
            elif 59.5 < time_diff <= 60:
                await bot.send_message(
                    user_id,
                    f"üöó –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –¥–æ –ø–æ–µ–∑–¥–∫–∏ –≤ {destination} –æ—Å—Ç–∞–ª—Å—è 1 —á–∞—Å!\n"
                    f"üìÖ –î–∞—Ç–∞: {date}\n‚è∞ –í—Ä–µ–º—è: {time}\nüìç –ê–¥—Ä–µ—Å: {address}",
                    reply_markup=main_keyboard
                )


if __name__ == '__main__':
    bot = Bot(token=BOT_TOKEN)


    async def main():
        asyncio.create_task(reminder_loop(bot))
        asyncio.create_task(trip_reminder_loop(bot))
        try:
            await dp.start_polling(bot)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}")
        finally:
            await bot.session.close()


    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logging.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logging.error(f"–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        conn.close()
